{"version":3,"sources":["components/commentsForm.js","components/addComments.js","components/showHideNoComments.js","actions/index.js","containers/App.js","reducers/index.js","index.js"],"names":["userName","userComment","CommentsForm","addComment","className","method","onSubmit","id","type","name","onChange","event","target","value","placeholder","required","cols","rows","AddComment","commentsList","deleteComment","map","liEl","key","publicationInfo","split","aria-label","onClick","CommentInfo","length","localStorage","getItem","storageArr","JSON","parse","prevComments","CommentApp","props","connect","state","dispatch","preventDefault","document","getElementById","Date","toLocaleString","year","month","day","hour","minute","reverse","join","action","localStorageObj","push","setItem","stringify","filteredArr","filter","item","initialState","store","createStore","ReactDOM","render","querySelector"],"mappings":"qNAqCWA,EACAC,E,2DAHIC,EAhCM,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACtB,OACE,0BAAMC,UAAY,mCAAmCC,OAAS,OAAOC,SAAYH,GAC3E,2BAAOC,UAAW,6BAChB,2BAAOA,UAAY,mBACnBG,GAAK,kBACLC,KAAO,OACPC,KAAO,YACPC,SAAY,SAAAC,GAAUX,EAAYW,EAAMC,OAAOC,OAC/CC,YAAc,yFACdC,UAAQ,KAIV,2BAAOX,UAAY,oCACjB,8BACUG,GAAG,wBACHH,UAAY,wBACZY,KAAO,KAAKC,KAAO,IACnBR,KAAO,eACPC,SAAY,SAAAC,GAAUV,EAAeU,EAAMC,OAAOC,OAClDC,YAAc,mIACdC,UAAQ,KAKpB,4BAAQX,UAAY,sBAAsBI,KAAO,UAAjD,yHCEKU,EA7BI,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAClC,OAEED,EAAaE,KAAI,SAACC,GAChB,OACA,wBAAIC,IAAOD,EAAKf,GAAIH,UAAY,sBAC9B,6BAASA,UAAY,iBACnB,4BAAQA,UAAY,2BAClB,wBAAIA,UAAY,0BAA0BkB,EAAKtB,UAE/C,0BAAMI,UAAY,wBAAwBkB,EAAKE,gBAAgBC,MAAM,KAAK,GACxE,0BAAMrB,UAAY,wBAAwBkB,EAAKE,gBAAgBC,MAAM,KAAK,KAG5E,4BAAQrB,UAAY,6BACZI,KAAO,SACPkB,aAAW,gHACXC,QAAW,SAAAhB,GAAK,OAAIS,EAAcE,EAAKf,QAIjD,uBAAGH,UAAY,oBAAoBkB,EAAKrB,mBCXnC2B,MAVf,YACE,OAA4B,IADO,EAAfT,aACHU,OACR,KAGL,uBAAGzB,UAAY,mCAAf,mGCPFG,EAAK,EAIT,GAAIuB,aAAaC,QAAQ,gBAAiB,CAExC,IAAMC,EAAaC,KAAKC,MAAMJ,aAAaK,cAEjB,IAAtBH,EAAWH,SAEbtB,EAAKyB,EAAWA,EAAWH,OAAS,GAAGtB,GAAK,GAKzC,ICJH6B,EAAa,SAACC,GAAW,IAEzBlB,EACEkB,EADFlB,aAAchB,EACZkC,EADYlC,WAAYiB,EACxBiB,EADwBjB,cAG5B,OACE,6BAAShB,UAAY,oBACnB,wBAAIA,UAAY,iCAAhB,wHAEA,kBAAC,EAAD,CAAcD,WAAcA,IAE5B,kBAAC,EAAD,CAAagB,aAAgBA,IAE7B,wBAAIf,UAAY,kCACd,kBAAC,EAAD,CAAYe,aAAgBA,EAAcC,cAAgBA,OA4BnDgB,EALfA,EAAaE,aAfW,SAACC,GACvB,MAAO,CACLpB,aAAcoB,MAKO,SAACC,GACxB,MAAO,CAELrC,WAAY,SAACQ,EAAOF,GAAR,OAAiB+B,ED5BP,SAAC7B,EAAOX,EAAUC,GAC1CU,EAAM8B,iBAONC,SAASC,eAAe,mBAAmB9B,MAAQ,GACnD6B,SAASC,eAAe,yBAAyB9B,MAAQ,GAGzD,IAAMW,GAAkB,IAAIoB,MAAOC,eAAe,KAAM,CAACC,KAAK,UAC5DC,MAAM,UACNC,IAAI,UACJC,KAAK,UACLC,OAAQ,YACPzB,MAAM,MAAM0B,UAAUC,KAAK,KAE9B,MAAO,CACL5C,KAAM,cACND,GAAIA,IACJP,WACAC,cACAuB,mBCIsCrB,CAAWQ,EAAOX,EAAUC,KAClEmB,cAAgB,SAACb,GAAD,OAAQiC,EDAC,SAACjC,GAC5B,MAAO,CACLC,KAAM,iBACND,MCHiCa,CAAcb,QAItC+B,CAGXF,G,cCAcjB,EApDK,WAAyB,IAAxBoB,EAAuB,uDAAf,GAAIc,EAAW,uCAC3C,OAAQA,EAAO7C,MACb,IAAK,cAEH,IAAI2B,EAKFA,EAFEL,aAAaC,QAAQ,gBAERE,KAAKC,MAAMJ,aAAaC,QAAQ,iBAEhC,GAIjB,IAAMuB,EAAqB,CACzB/C,GAAI8C,EAAO9C,GACXP,SAAUqD,EAAOrD,SACjBC,YAAaoD,EAAOpD,YACpBuB,gBAAiB6B,EAAO7B,iBAU1B,OANAW,EAAaoB,KAAKD,GAGlBxB,aAAa0B,QAAQ,eAAgBvB,KAAKwB,UAAUtB,IAG9C,GAAN,mBACKI,GADL,CAEE,CACEhC,GAAI8C,EAAO9C,GACXP,SAAUqD,EAAOrD,SACjBC,YAAaoD,EAAOpD,YACpBuB,gBAAiB6B,EAAO7B,mBAI9B,IAAK,iBAEH,IAAMkC,EAAcnB,EAAMoB,QAAO,SAAAC,GAAI,OAAIA,EAAKrD,KAAO8C,EAAO9C,MAK9D,OAFEuB,aAAa0B,QAAQ,eAAgBvB,KAAKwB,UAAUC,IAE/CA,EAEP,QAAS,OAAOnB,ICpChBsB,EAAe,GAIf/B,aAAaC,QAAQ,kBACvB8B,EAAe5B,KAAKC,MAAMJ,aAAaC,QAAQ,kBAGjD,IAAM+B,EAAQC,YAAY5C,EAAc0C,GAExCG,IAASC,OACP,kBAAC,EAAD,CAAYH,MAASA,IACrBpB,SAASwB,cAAc,uB","file":"static/js/main.8461aa18.chunk.js","sourcesContent":["import React from 'react';\n\n//На входе получаем функцию добавление комментария\nconst CommentsForm = ({ addComment }) => {\n  return(\n    <form className = 'comments-section__input-comments' method = \"post\" onSubmit = {addComment}>\n          <label className ='input-comments__user-name'>\n            <input className = 'user-name__input'\n            id = 'user-name-input' \n            type = 'text' \n            name = 'user-name' \n            onChange = {event => {userName = (event.target.value)}}\n            placeholder = 'Введите Ваше имя'\n            required \n            />\n          </label>\n\n          <label className = 'input-comments__comment-textarea'>\n            <textarea \n                      id='user-comment-textarea'\n                      className = 'label__comments-input' \n                      cols = '50' rows = '5' \n                      name = 'user-comment'\n                      onChange = {event => {userComment = (event.target.value)}}\n                      placeholder = 'Введите Ваш комментарий' \n                      required\n            >\n            </textarea>\n          </label>\n\n          <button className = 'input-comments__btn' type = 'submit'>Добавить комментарий</button>\n    </form>\n  )\n}\n\nexport default CommentsForm;\n//экспорт данны с onChange имени и комментария\nexport let userName;\nexport let userComment;","import React from 'react';\n\n//На вход получаем текущей список комментариев и функцию удаления комментария\nconst AddComment = ({ commentsList, deleteComment }) => {\n  return (\n    //Для каждомго элемента массива комменатриев ренедрим li\n    commentsList.map((liEl) => {\n      return (\n      <li key = {liEl.id} className = 'coments-list__item'>\n        <article className = 'item__article'>\n          <header className = 'article__header-section'>\n            <h2 className = 'header-section__header'>{liEl.userName}</h2>\n\n            <time className = 'header-section__date'>{liEl.publicationInfo.split(' ')[1]}\n              <span className = 'header-section__time'>{liEl.publicationInfo.split(' ')[0]}</span>\n            </time>\n\n            <button className = 'header-section__delete-btn'\n                    type = 'button' \n                    aria-label='Удалить комментарий'\n                    onClick = {event => deleteComment(liEl.id)}>\n                    </button>\n          </header>\n          \n          <p className = 'article__comment'>{liEl.userComment}</p>\n        </article>\n      </li>\n      )\n    })\n  )\n}\n\nexport default AddComment;","import React from 'react';\n\n// В зависимости от колличества комментариев рендерим или нет \"Комментариев нет...\"\nfunction CommentInfo({commentsList}) {\n  if (commentsList.length !== 0) {\n    return null;\n  } else {\n    return(\n      <p className = 'comments-section__comments-info'>Комментариев нет...</p>\n    )\n  }\n}\n\nexport default CommentInfo;","//Счетчик для уникального id комментария\nlet id = 0;\n\n//Когда у нас есть данные в localStorage, то мы продолжаем в качестве начального значения для id берем \n//id последнего комментария в local storage\nif (localStorage.getItem('prevComments')) {\n  //превводим в массив\n  const storageArr = JSON.parse(localStorage.prevComments);\n\n  if (storageArr.length !== 0) {\n    //получаем новый стартовый id\n    id = storageArr[storageArr.length - 1].id + 1;\n  }\n}\n\n//Доавление комментария\nexport const addComment = (event, userName, userComment) => {\n  event.preventDefault();\n\n  //Считываем значения полей имени и комментария\n  // const userName = document.getElementById('user-name-input').value;\n  // const userComment = document.getElementById('user-comment-textarea').value;\n\n  //очищаем эти поля\n  document.getElementById('user-name-input').value = '';\n  document.getElementById('user-comment-textarea').value = '';\n\n  //Получаем время создания комментария\n  const publicationInfo = new Date().toLocaleString('ru', {year:'numeric', \n    month:'numeric', \n    day:'numeric', \n    hour:'numeric',\n    minute: 'numeric'\n  }).split(', ').reverse().join(' ');\n\n  return {\n    type: 'ADD_COMMENT',\n    id: id++,\n    userName,\n    userComment,\n    publicationInfo\n  }\n}\n\n//Удаление комментария, получаем id по которрому будем фильтровать массив комменатрий и создавать новую копию\nexport const deleteComment = (id) => {\n  return {\n    type: 'DELETE_COMMENT',\n    id\n  }\n\n} ","import React from 'react';\nimport { connect } from 'react-redux';\n\n//Импорт формы, эелементов списка, абзац \"Комментариев нет...\"\nimport CommentsForm from '../components/commentsForm';\nimport AddComment from '../components/addComments';\nimport CommentInfo from '../components/showHideNoComments';\nimport { userName, userComment }  from '../components/commentsForm';\n\n//Импорт добавление и удалени комментария\nimport { addComment, deleteComment } from '../actions/index'\n\nlet CommentApp = (props) => {\n  const {\n    commentsList, addComment, deleteComment\n  } = props;\n\n  return (\n    <section className = 'comments-section'>\n      <h1 className = 'comments-section__main-header'>Добавьте комментарий!</h1>\n      \n      <CommentsForm addComment = {addComment} />\n\n      <CommentInfo commentsList = {commentsList}/>\n\n      <ul className = 'comments-section__coments-list'>\n        <AddComment commentsList = {commentsList} deleteComment= {deleteComment} />\n      </ul>\n      \n    </section>\n  )\n}\n\n//Связываем commentsList со state\nconst mapStateToProps = (state) => {\n  return {\n    commentsList: state\n  }\n}\n\n//вязываем dispatch с удаленим и добавлением комментария\nconst mapDispatchProps = (dispatch) => {\n  return {\n    // onInputChange: (event) => dispatch(onInputChange(event))\n    addComment: (event, name) => dispatch(addComment(event, userName, userComment)),\n    deleteComment : (id) => dispatch(deleteComment(id))\n  }\n}\n\nCommentApp = connect(\n  mapStateToProps,\n  mapDispatchProps\n)(CommentApp);\n\nexport default CommentApp;","const commentsList = (state = [], action) => { \n  switch (action.type) {\n    case 'ADD_COMMENT':\n      //Промежуточная перменная для хранения состояния\n      let prevComments;\n\n      //Проверяем, есть ли уже сохраненые комментарияя в localStorage\n      if (localStorage.getItem('prevComments')) {\n        //Еесли есть записываем в prevComments массив этих комментариев\n        prevComments = JSON.parse(localStorage.getItem('prevComments'));\n      } else {\n        prevComments = [];\n      }\n\n      //Записываем новый комментарий в localStorageObj\n      const localStorageObj =    {\n        id: action.id,\n        userName: action.userName,\n        userComment: action.userComment,\n        publicationInfo: action.publicationInfo\n      }\n\n      //Добавляем localStorageObj в промежутночный массив\n      prevComments.push(localStorageObj);\n\n      //Записываем в localStorage\n      localStorage.setItem('prevComments', JSON.stringify(prevComments));\n\n      //обновляем состояние\n      return [\n        ...state, \n        {\n          id: action.id,\n          userName: action.userName,\n          userComment: action.userComment,\n          publicationInfo: action.publicationInfo\n        }\n    ]\n\n    case 'DELETE_COMMENT':\n      // получаем новый массив без удаленного комментария\n      const filteredArr = state.filter(item => item.id !== action.id);\n\n      // После обновления состояния, удаляем из localStorage комментарий, который мы удалили\n      localStorage.setItem('prevComments', JSON.stringify(filteredArr));\n      \n    return filteredArr\n    \n    default: return state;\n  }\n}\n\nexport  default commentsList;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './css/normolize.css';\nimport './css/common-styles.css';\nimport './css/styles.css';\n\nimport CommentApp from './containers/App';\nimport { createStore } from 'redux';\nimport commentsList from './reducers';\n\n//Начальнео значение состояния\nlet initialState = [];\n\n//При перезагрузке старницы в пременную prevComments запишем массив объектов из localStorage\n//этот массив задаст начальные условия для списка комментариев\nif (localStorage.getItem('prevComments')) {\n  initialState = JSON.parse(localStorage.getItem('prevComments'))\n}\n\nconst store = createStore(commentsList, initialState);\n\nReactDOM.render(\n  <CommentApp store = {store}/>,\n  document.querySelector('.comment-section')\n);"],"sourceRoot":""}