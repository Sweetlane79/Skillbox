{"version":3,"sources":["addComment.js","commentsForm.js","index.js"],"names":["AddComment","props","commentData","map","liEl","key","id","className","name","publicationInfo","split","type","aria-label","onClick","deleteComment","bind","comment","CommentsForm","method","onSubmit","value","userName","onChange","getUserName","placeholder","required","cols","rows","userComment","getUserComment","numberId","localStorage","getItem","storageArr","JSON","parse","prevComments","length","CommentInfo","commentsAmount","CommentWidget","state","commentsItems","submitComment","event","this","setState","target","filteredArr","filter","item","setItem","stringify","preventDefault","dateTime","Date","toLocaleString","year","month","day","hour","minute","reverse","join","trim","alert","push","toString","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.1a5eca25.chunk.js","sourcesContent":["import React from 'react';\n\nfunction AddComment(props) {\n  return (\n    props.commentData.map((liEl) => {\n      return (\n      <li key = {liEl.id} \n          className = 'coments-list__item'>\n        <article className = 'item__article'>\n          <header className = 'article__header-section'>\n            <h2 className = 'header-section__header'>{liEl.name}</h2>\n\n            <time className = 'header-section__date'>{liEl.publicationInfo.split(' ')[1]}\n              <span className = 'header-section__time'>{liEl.publicationInfo.split(' ')[0]}</span>\n            </time>\n\n            <button className = 'header-section__delete-btn'\n                    type = 'button' \n                    aria-label='Удалить комментарий'\n                    onClick = {props.deleteComment.bind(this, liEl.id)}>\n                    </button>\n          </header>\n          \n      <p className = 'article__comment'>{liEl.comment}</p>\n        </article>\n      </li>\n      )\n    })\n  )\n}\n\nexport default AddComment;\n","import React from 'react';\n\nfunction CommentsForm(props) {\n  return(\n    <form className = 'comments-section__input-comments' method = \"post\" onSubmit = {props.onSubmit} >\n          <label className ='input-comments__user-name'>\n            <input className = 'user-name__input' \n            type = 'text' \n            name = 'user-name' \n            value = {props.userName}\n            onChange = {props.getUserName}\n            placeholder = 'Введите Ваше имя'\n            required \n            />\n          </label>\n\n          <label className = 'input-comments__comment-textarea'>\n            <textarea className = 'label__comments-input' \n                      cols = '50' rows = '5' \n                      name = 'user-comment'\n                      placeholder = 'Введите Ваш комментарий' \n                      value = {props.userComment}\n                      onChange = {props.getUserComment}\n                      required>\n            </textarea>\n          </label>\n\n          <button className = 'input-comments__btn' type = 'submit'>Добавить комментарий</button>\n    </form>\n \n  )\n}\n\nexport default CommentsForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './normolize.css';\nimport './common-styles.css';\nimport './styles.css';\n\nimport AddComment from './addComment'\nimport CommentsForm from './commentsForm'\n\n//Счетчик для уникального id комментария\nlet numberId = 0;\n\n//Когда у нас есть данные в localStorage, то мы продолжаем в качестве начального значения для numberId берем \n//id последнего комментария в local storage\nif (localStorage.getItem('prevComments')) {\n  //превводим в массив\n  const storageArr = JSON.parse(localStorage.prevComments);\n\n  if (storageArr.length !== 0) {\n    //получаем новый стартовый id\n    numberId = storageArr[storageArr.length - 1].id;\n  }\n}\n\n//Функция для определения даты отправления комментария\nfunction getDateTime() {\n  const dateTime = new Date().toLocaleString('ru', {year:'numeric', \n    month:'numeric', \n    day:'numeric', \n    hour:'numeric',\n    minute: 'numeric'\n  }).split(', ').reverse().join(' ');\n\n  return dateTime;\n}\n\n//В зависимости от колличества комментариев рендерим или нет \"Комментариев нет...\"\nfunction CommentInfo(props) {\n  if (props.commentsAmount.length !== 0) {\n    return null;\n  } else {\n    return(\n      <p className = 'comments-section__comments-info'>Комментариев нет...</p>\n    )\n  }\n}\n\nclass CommentWidget extends React.Component {\n  constructor() {\n    super();\n\n    let prevComments = [];\n\n    //При перезагрузке старницы в пременную prevComments запишем массив объектов из localStorage\n    //этот массив задаст начальные условия для списка комментариев\n    if (localStorage.getItem('prevComments')) {\n      prevComments = JSON.parse(localStorage.getItem('prevComments'))\n    }\n\n    //начальные условия\n    this.state = {\n      userName: '',\n      userComment: '',\n      //задаем начальне условие для спсика комментариев через перменную prevCommnets\n      commentsItems: prevComments\n    };\n\n    this.getUserName = this.getUserName.bind(this);\n    this.getUserComment = this.getUserComment.bind(this);\n    this.submitComment = this.submitComment.bind(this);\n    this.deleteComment = this.deleteComment.bind(this);\n  }\n\n  //Функция для получения имени автора комментария\n  getUserName(event) {\n    this.setState({userName: event.target.value});\n  }\n\n  //Функция для получения комментария\n  getUserComment(event) {\n    this.setState({userComment: event.target.value});\n  }\n\n  deleteComment(id) {\n    // получаем новый массив без удаленного комментария\n    const filteredArr = this.state.commentsItems.filter(item => item.id !== id);\n  \n    // После обновления состояния, удаляем из localStorage комментарий, который мы удалили\n    this.setState({commentsItems: filteredArr}, function() {\n      localStorage.setItem('prevComments', JSON.stringify(this.state.commentsItems));\n    });\n  }\n\n  //Получаем имя, комментарий и дату\n  submitComment(event) {\n    event.preventDefault();\n\n    const userName = this.state.userName;\n    const userComment = this.state.userComment;\n    const commentsItems = this.state.commentsItems;\n    const dateTime = getDateTime();\n\n    //Используем trim() чтобы не допустить ввод одних лишь пробелов\n    if (userName.trim() === '') {\n      alert('В Вашем имени одни пробелы');\n    } else if (userComment.trim() === '') {\n      alert('В Вашем комментарии од1ни пробелы');\n    } else {\n      numberId++;\n\n      commentsItems.push({ \n                          id: numberId.toString(),\n                          name: userName,\n                          comment: userComment,\n                          publicationInfo: dateTime\n     })\n\n      this.setState({userName: '',\n                     userComment: '',\n                     commentsItems\n      });\n\n      //Сохраняем в localStorage\n      localStorage.setItem('prevComments', JSON.stringify(this.state.commentsItems));\n    }\n  }\n\n  render () {\n    return (\n      <section className = 'comments-section'>\n        <h1 className = 'comments-section__main-header'>Добавьте комментарий!</h1>\n\n        <CommentsForm userName = {this.state.userName}\n                      getUserName = {this.getUserName}\n                      onSubmit = {this.submitComment}\n                      userComment = {this.state.userComment}\n                      getUserComment = {this.getUserComment}\n        />\n\n        <CommentInfo commentsAmount = {this.state.commentsItems}/>\n\n        <ul className = 'comments-section__coments-list'>\n          <AddComment commentData = {this.state.commentsItems} deleteComment = {this.deleteComment}/>\n        </ul>\n      </section>\n    );\n  }\n}\n\nReactDOM.render(\n  <CommentWidget />,\n  document.querySelector('.comment-section')\n);\n\n\n\n"],"sourceRoot":""}